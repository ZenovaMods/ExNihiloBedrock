#pragma once

#include "Actor.h"

class BodyControl;
struct TextureUVCoordinateSet;

enum class EquipmentSlot : int;

class Mob : public Actor {
public:
    virtual void initializeComponents(Actor::InitializationMethod, const VariantParameterList&);
    virtual void reloadHardcodedClient(Actor::InitializationMethod, const VariantParameterList&);
    virtual void reloadHardcoded(Actor::InitializationMethod, const VariantParameterList&);
    virtual ~Mob();
    virtual void knockback(Actor*, int, float, float, float, float, float);
    virtual void kill();
    virtual void die(const ActorDamageSource&);
    virtual void resolveDeathLoot(int, const ActorDamageSource&);
    virtual void playerTouch(Player&);
    virtual void spawnAnim();
    virtual bool isAlive() const;
    virtual bool isPickable();
    virtual bool isShootable();
    virtual bool isSleeping() const;
    virtual void setSleeping(bool);
    virtual bool isBlocking() const;
    virtual bool isSprinting() const;
    virtual void setSprinting(bool);
    virtual bool canBePulledIntoVehicle() const;
    virtual void playAmbientSound();
    virtual LevelSoundEvent getAmbientSound();
    virtual int getAmbientSoundPostponeTicks();
    virtual const TextureUVCoordinateSet* getItemInHandIcon(const ItemStack&, int);
    virtual void lerpTo(const Vec3&, const Vec2&, int);
    virtual float getSpeed() const;
    virtual void setSpeed(float);
    virtual bool isJumping() const;
    virtual float getJumpPower() const;
    virtual float getYawSpeedInDegreesPerSecond() const;
    virtual void normalTick();
    virtual void baseTick();
    virtual bool hurtEffects(const ActorDamageSource&, int, bool, bool);
    virtual int getMeleeWeaponDamageBonus(Mob*);
    virtual int getMeleeKnockbackBonus();
    virtual void actuallyHurt(int, const ActorDamageSource*, bool);
    virtual void animateHurt();
    virtual bool doFireHurt(int);
    virtual void travel(float, float, float);
    virtual void applyFinalFriction(float, bool);
    virtual void updateWalkAnim();
    virtual void aiStep();
    virtual void pushActors();
    virtual void lookAt(Actor*, float, float);
    virtual bool isLookingAtAnEntity();
    virtual bool checkSpawnRules(bool);
    virtual bool checkSpawnObstruction() const;
    virtual bool shouldDespawn() const;
    virtual float getAttackAnim(float);
    virtual void addRider(Actor&);
    virtual bool startRiding(Actor&);
    virtual void stopRiding(bool, bool, bool);
    virtual float getYHeadRot() const;
    virtual void handleEntityEvent(ActorEvent, int);
    virtual int getItemUseDuration();
    virtual float getItemUseStartupProgress();
    virtual float getItemUseIntervalProgress();
    virtual int getItemuseIntervalAxis();
    virtual void swing();
    virtual int getTimeAlongSwing();
    virtual void ate();
    virtual float getMaxHeadXRot();
    virtual bool isImmobile() const;
    virtual void blockedByShield(const ActorDamageSource&, Actor&);
    virtual Mob* getLastHurtByMob();
    virtual void setLastHurtByMob(Mob*);
    virtual Player* getLastHurtByPlayer();
    virtual void setLastHurtByPlayer(Player*);
    virtual Mob* getLastHurtMob();
    virtual void setLastHurtMob(Actor*);
    virtual void setTarget(Actor*);
    virtual bool attack(Actor&);
    virtual bool isAlliedTo(Mob*);
    virtual bool doHurtTarget(Actor*);
    virtual bool canBeControlledByRider();
    virtual void leaveCaravan();
    virtual void joinCaravan(Mob*);
    virtual bool hasCaravanTail() const;
    virtual bool inCaravan() const;
    virtual ActorUniqueID getCaravanHead() const;
    virtual int getArmorValue();
    virtual float getArmorCoverPercentage() const;
    virtual void hurtArmor(int);
    virtual ArmorMaterialType getArmorMaterialTypeInSlot(ArmorSlot) const;
    virtual ArmorTextureType getArmorMaterialTextureTypeInSlot(ArmorSlot) const;
    virtual float getArmorColorInSlot(ArmorSlot, int) const;
    virtual void containerChanged(int);
    virtual void updateEquipment();
    virtual int clearEquipment();
    virtual std::vector<ItemStack const*> getAllArmor() const;
    virtual std::vector<int> getAllArmorID() const;
    virtual std::vector<ItemStack const*> getAllHand() const;
    virtual std::vector<ItemStack const*> getAllEquipment() const;
    virtual int getDeathTime() const;
    virtual int getArmorTypeHash();
    virtual void setOnFire(int);
    virtual void sendInventory(bool);
    virtual void sendArmor();
    virtual void buildDebugInfo(std::string&) const;
    virtual float getInterpolatedBodyRot(float) const;
    virtual float getInterpolatedHeadRot(float) const;
    virtual float getInterpolatedBodyYaw(float) const;
    virtual bool isSurfaceMob() const;
    virtual int getDamageAfterMagicAbsorb(const ActorDamageSource&, int);
    virtual bool createAIGoals();
    virtual void onBorn(Actor&, Actor&);
    virtual bool setItemSlot(EquipmentSlot, const ItemStack&);
    virtual void goDownInWater();
    virtual void setTransitioningSitting(bool);
    virtual bool hasComponent(const Util::HashString&) const;
    virtual void teleportTo(const Vec3&, bool, int, int);
    virtual void attackAnimation(Actor*, float);
    virtual int getAttackTime();
    virtual float _getWalkTargetValue(const BlockPos&);
    virtual bool canExistWhenDisallowMob() const;
    virtual bool canPowerJump() const;
    virtual void setEquippedSlot(ArmorSlot, int, int);
    virtual void setEquippedSlot(ArmorSlot, const ItemStack&);
    virtual void renderDebugServerState(const Options&);
    virtual bool useNewAi() const;
    virtual void ascendLadder();
    virtual void ascendScaffolding();
    virtual void descendScaffolding();
    virtual void updateEntitySpecificMolangVariables(RenderParams&);
    virtual void addAdditionalSaveData(CompoundTag&);
    virtual void readAdditionalSaveData(const CompoundTag&, DataLoadHelper&);
    virtual std::unique_ptr<BodyControl> initBodyControl();
    virtual void causeFallDamage(float);
    virtual void _onSizeUpdated();
    virtual void outOfWorld();
    virtual bool _hurt(const ActorDamageSource&, int, bool, bool);
    virtual void jumpFromGround();
    virtual void updateAi();
    virtual void newServerAiStep();
    virtual void _serverAiMobStep();
    virtual void _playStepSound(const BlockPos&, const Block&);
    virtual int getDamageAfterEnchantReduction(const ActorDamageSource&, int);
    virtual int getDamageAfterArmorAbsorb(const ActorDamageSource&, int);
    virtual void dropEquipment(const ActorDamageSource&, int);
    virtual void dropEquipment();
    virtual void dropBags();
    virtual void dropContainer();
    virtual void rideTick();
    virtual void tickDeath();
    virtual void _removeRider(const ActorUniqueID&, bool, bool);
    virtual void _endJump();
    virtual void updateGliding();
    virtual bool _allowAscendingScaffolding() const;
};